% Define list of river CSV files and corresponding names
river_files = {'monkey-data/river-1.csv', 'monkey-data/river-2.csv', 'monkey-data/river-3.csv'};
river_names = {'River 1', 'River 2', 'River 3'};

% Define system configurations in a structure array
configs(1).name = 'archimedes screw';
configs(1).percent_constraint = 0.5;
configs(2).name = 'duct';
configs(2).percent_constraint = 0.1;

% Define constant parameters
H   = 8;      % height of the drop in meters
eta = 0.75;   % turbine efficiency
rho = 1000;   % density of water in kg/m^3
g   = 9.81;   % acceleration due to gravity in m/s^2

% Define the years corresponding to the columns in the CSV (for legend)
years = 2020:2024;

% Initialize aggregated power matrices for each configuration (one cell per config)
total_power = cell(1, length(configs));

% We'll use the months from the first file as the reference for aggregated plots
months_aggregated = [];

% Loop over each river file
for r = 1:length(river_files)
    % Read data from CSV file
    data = readmatrix(river_files{r});
    
    % Extract months (first column) and flow data (remaining columns)
    months = data(:, 1);        % Months (0 to 25)
    flow_data = data(:, 2:end);   % Flow data for 2020 to 2024
    
    % For the first river, store the months for aggregated plots
    if r == 1
        months_aggregated = months;
    end
    
    % Display extracted data
    fprintf('\nData for %s:\n', river_names{r});
    disp('Months:');
    disp(months);
    disp('Flow data for each year:');
    disp(flow_data);
    
    % Loop over the two configurations (archimedes screw and duct)
    for c = 1:length(configs)
        % Calculate potential power for each flow rate in the data
        power_generated = eta * rho * g * H * flow_data * configs(c).percent_constraint;
        
        % Display the power generated
        fprintf('\nPower generated (in watts) for each year and month on %s with a %s:\n', ...
            river_names{r}, configs(c).name);
        disp(power_generated);
        
        % Plot power generated for each month across all years for this river & method
        figure;
        hold on;
        colors = lines(size(flow_data, 2)); % Generate distinct colors for each year
        for i = 1:size(flow_data, 2)
            plot(months, power_generated(:, i), '-o', 'LineWidth', 1.5, 'MarkerSize', 6, ...
                'Color', colors(i, :));
        end
        title(['Power Generated by Month for Each Year on ' river_names{r} ' with a ' configs(c).name]);
        xlabel('Month');
        ylabel('Power Generated (Watts)');
        legend(arrayfun(@num2str, years, 'UniformOutput', false), 'Location', 'best');
        grid on;
        hold off;
        
        % Accumulate the power_generated into total_power for the current configuration
        if r == 1
            % For the first river, initialize the aggregated matrix
            total_power{c} = power_generated;
        else
            % Add the current river's power to the aggregated total
            total_power{c} = total_power{c} + power_generated;
        end
    end
end

% After processing all rivers, plot aggregated power for each configuration
for c = 1:length(configs)
    figure;
    hold on;
    colors = lines(size(total_power{c}, 2)); % Generate distinct colors for each year
    for i = 1:size(total_power{c}, 2)
        plot(months_aggregated, total_power{c}(:, i), '-o', 'LineWidth', 1.5, 'MarkerSize', 6, ...
            'Color', colors(i, :));
    end
    title(['Aggregated Power Generated by Month for Each Year with a ' configs(c).name]);
    xlabel('Month');
    ylabel('Aggregated Power Generated (Watts)');
    legend(arrayfun(@num2str, years, 'UniformOutput', false), 'Location', 'best');
    grid on;
    hold off;
end
