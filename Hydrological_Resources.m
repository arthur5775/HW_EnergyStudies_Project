% Define list of river CSV files and corresponding names
river_files = ["monkey-data/river-1.csv", "monkey-data/river-2.csv", "monkey-data/river-3.csv"];
river_names = ["River 1", "River 2", "River 3"];

% Define system configurations in a structure array
configs(1).name = "archimedes screw";
configs(1).percent_constraint = 0.5;
configs(1).eta = 0.75;  % Efficiency specific to Archimedes screw

configs(2).name = "duct";
configs(2).percent_constraint = 0.1;
configs(2).eta = 0.84;  % Efficiency specific to the turbine

% Define constant parameters
H   = 8;      % height of the drop in meters
rho = 1000;   % density of water in kg/m^3
g   = 9.81;   % acceleration due to gravity in m/s^2

% Define the years corresponding to the columns in the CSV (for legend)
years = 2020:2024;

% Initialize aggregated power matrices for each configuration
total_power = cell(1, length(configs));

% We'll use the months from the first file as the reference for aggregated plots
months_aggregated = [];

% Initialize total generated power for display
total_power_generated = zeros(length(configs), length(years));

% Loop over each river file
for r = 1:length(river_files)
    % Read data from CSV file
    data = readmatrix(river_files(r));
    
    % Extract months (first column) and flow data (remaining columns)
    months = data(:, 1);        % Months (assumed to be 1-12)
    flow_data = data(:, 2:end); % Flow data for 2020 to 2024
    
    % Store the months for aggregated plots (only from first river)
    if r == 1
        months_aggregated = months;
    end
    
    % Display extracted data
    fprintf('\nData for %s:\n', river_names(r));
    disp('Months:');
    disp(months);
    disp('Flow data for each year:');
    disp(flow_data);
    
    % Loop over configurations (Archimedes screw and duct)
    for c = 1:length(configs)
        % Select the efficiency for the current configuration
        eta = configs(c).eta;
        
        % Calculate potential power for each flow rate
        power_generated = eta * rho * g * H * flow_data * configs(c).percent_constraint;
        
        % Display the power generated
        fprintf('\nPower generated (in watts) for each year and month on %s with a %s:\n', ...
            river_names(r), configs(c).name);
        disp(power_generated);
        
        % Accumulate total power generated for final display
        total_power_generated(c, :) = total_power_generated(c, :) + sum(power_generated, 1);
        
        % Plot power generated for each month across all years for this river & method
        figure;
        hold on;
        colors = lines(size(flow_data, 2)); % Generate distinct colors for each year
        for i = 1:size(flow_data, 2)
            plot(months, power_generated(:, i), '-o', 'LineWidth', 1.5, 'MarkerSize', 6, ...
                'Color', colors(i, :));
        end
        title(['Power Generated by Month for Each Year on ' char(river_names(r)) ' with a ' char(configs(c).name)]);
        xlabel('Month');
        ylabel('Power Generated (Watts)');
        legend(arrayfun(@num2str, years, 'UniformOutput', false), 'Location', 'best');
        grid on;
        hold off;
        
        % Accumulate power into total_power for the current configuration
        if r == 1
            % Initialize for the first river
            total_power{c} = power_generated;
        else
            % Add current river's power to the aggregated total
            total_power{c} = total_power{c} + power_generated;
        end
    end
end

% Plot aggregated power for each configuration
for c = 1:length(configs)
    figure;
    hold on;
    colors = lines(size(total_power{c}, 2)); % Generate distinct colors for each year
    for i = 1:size(total_power{c}, 2)
        plot(months_aggregated, total_power{c}(:, i), '-o', 'LineWidth', 1.5, 'MarkerSize', 6, ...
            'Color', colors(i, :));
    end
    title(['Aggregated Power Generated by Month for Each Year with a ' char(configs(c).name)]);
    xlabel('Month');
    ylabel('Aggregated Power Generated (Watts)');
    legend(arrayfun(@num2str, years, 'UniformOutput', false), 'Location', 'best');
    grid on;
    hold off;
end

% Display total power generated summary
disp('===================================');
disp('Total Power Generated Per Year (Summed Across Rivers)');
disp('===================================');
for c = 1:length(configs)
    fprintf('\nConfiguration: %s\n', configs(c).name);
    for y = 1:length(years)
        fprintf('%d: %.2f kWh\n', years(y), total_power_generated(c, y) / 1000); % Convert watts to kWh
    end
end
disp('===================================');
